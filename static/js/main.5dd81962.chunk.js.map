{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","Title","h1","Table","table","GameSqaure","td","fill","winner","initialState","currentPlayer","squares","Array","from","length","checkForWinner","row","column","player","newPlayer","reducer","state","action","newSquares","newData","type","position","Error","App","useReducer","dispatch","map","square","tr_index","box","td_index","onClick","event","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","borderWidth","clientWidth","fillIn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5dd81962.chunk.js","sourcesContent":["import { useReducer } from \"react\";\nimport styled from \"styled-components\";\n\nconst borderWidth = 4;\n\nconst Container = styled.div`\n  padding: 0.5rem;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst Table = styled.table`\n  border-collapse: collapse;\n  margin: 0 auto;\n`;\n\nconst GameSqaure = styled.td`\n  width: 100px;\n  height: 100px;\n  cursor: pointer;\n\n  border-width: ${borderWidth}px;\n  border-color: black;\n  border-top-style: ${({ fill }) => (fill[0] === \"e\" ? \"dotted\" : \"solid\")};\n  border-right-style: ${({ fill }) => (fill[1] === \"e\" ? \"dotted\" : \"solid\")};\n  border-bottom-style: ${({ fill }) => (fill[2] === \"e\" ? \"dotted\" : \"solid\")};\n  border-left-style: ${({ fill }) => (fill[3] === \"e\" ? \"dotted\" : \"solid\")};\n\n  background-color: ${({ winner }) =>\n    winner === \"u\" ? \"transparent\" : winner === \"b\" ? \"blue\" : \"red\"};\n`;\n\nconst squares = Array.from({ length: 6 }, () =>\n  Array.from({ length: 6 }, () => [\"e\", \"e\", \"e\", \"e\", \"u\"])\n);\n\nconst initialState = {\n  currentPlayer: \"b\",\n  squares,\n};\n\nconst checkForWinner = (squares, row, column, player) => {\n  let newPlayer = player === \"b\" ? \"r\" : \"b\";\n\n  if (\n    squares[row][column][0] === \"f\" &&\n    squares[row][column][1] === \"f\" &&\n    squares[row][column][2] === \"f\" &&\n    squares[row][column][3] === \"f\"\n  ) {\n    squares[row][column][4] = player;\n    newPlayer = player;\n  }\n\n  return { squares, player: newPlayer };\n};\n\nconst reducer = (state, action) => {\n  let newSquares = [...state.squares];\n  let newData = {};\n\n  switch (action.type) {\n    case \"fill_in\":\n      newSquares[action.row][action.column][action.position] = \"f\";\n\n      // handle clicking the top border\n      if (action.position === 0 && action.row !== 0) {\n        newSquares[action.row - 1][action.column][2] = \"f\";\n\n        newData = checkForWinner(\n          newSquares,\n          action.row - 1,\n          action.column,\n          state.currentPlayer\n        );\n      }\n      // handle clicking the bottom border\n      if (action.position === 2 && action.row !== state.squares.length - 1) {\n        newSquares[action.row + 1][action.column][0] = \"f\";\n\n        newData = checkForWinner(\n          newSquares,\n          action.row + 1,\n          action.column,\n          state.currentPlayer\n        );\n      }\n      // handle clicking the left border\n      if (action.position === 3 && action.column !== 0) {\n        newSquares[action.row][action.column - 1][1] = \"f\";\n\n        newData = checkForWinner(\n          newSquares,\n          action.row,\n          action.column - 1,\n          state.currentPlayer\n        );\n      }\n      // handle clicking the right border\n      if (\n        action.position === 1 &&\n        action.column !== state.squares[action.row].length - 1\n      ) {\n        newSquares[action.row][action.column + 1][3] = \"f\";\n\n        newData = checkForWinner(\n          newSquares,\n          action.row,\n          action.column + 1,\n          state.currentPlayer\n        );\n      }\n\n      newData = checkForWinner(\n        newSquares,\n        action.row,\n        action.column,\n        state.currentPlayer\n      );\n\n      return {\n        ...state,\n        currentPlayer: newData.player,\n        squares: newData.squares,\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fillIn = (event, row, column) => {\n    const bubble = 4;\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    let position = -1;\n\n    if (x <= borderWidth + bubble) {\n      //left\n      position = 3;\n    }\n    if (x >= event.target.clientWidth - bubble) {\n      // right\n      position = 1;\n    }\n    if (y <= borderWidth + bubble) {\n      //top\n      position = 0;\n    }\n    if (y >= event.target.clientWidth - bubble) {\n      //bottom\n      position = 2;\n    }\n\n    if (position > -1) {\n      dispatch({ type: \"fill_in\", position, row, column });\n    }\n  };\n\n  const { squares } = state;\n\n  return (\n    <Container>\n      <Title>\n        Current Player: {state.currentPlayer === \"b\" ? \"Blue\" : \"Red\"}\n      </Title>\n      <Table>\n        <tbody>\n          {squares.map((square, tr_index) => (\n            <tr key={tr_index}>\n              {square.map((box, td_index) => (\n                <GameSqaure\n                  key={td_index}\n                  onClick={(event) => fillIn(event, tr_index, td_index)}\n                  fill={box}\n                  winner={box[4]}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}